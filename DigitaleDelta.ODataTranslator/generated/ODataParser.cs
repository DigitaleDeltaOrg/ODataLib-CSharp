//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammar/OData.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ODataParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FILTER=1, SELECT=2, TOP=3, COUNT=4, SKIPTOKEN=5, STARTSWITH=6, ENDSWITH=7, 
		CONTAINS=8, TOLOWER=9, TOUPPER=10, LENGTH=11, INDEXOF=12, SUBSTRING=13, 
		TRIM=14, TIME=15, FLOOR=16, CEIL=17, ROUND=18, ABS=19, YEAR=20, MONTH=21, 
		DAY=22, HOUR=23, MINUTE=24, SECOND=25, NOW=26, DATE=27, DISTANCE=28, INTERSECTS=29, 
		EQ=30, GT=31, LT=32, GE=33, LE=34, EQ_OP=35, NE=36, AND=37, OR=38, NOT=39, 
		IN=40, LPAREN=41, RPAREN=42, COMMA=43, AMPERSAND=44, BOOLEAN=45, NUMBER=46, 
		STRING=47, IDENTIFIER=48, WS=49;
	public const int
		RULE_query = 0, RULE_queryOption = 1, RULE_filterOption = 2, RULE_primary = 3, 
		RULE_valueList = 4, RULE_filterExpr = 5, RULE_function = 6, RULE_comparison = 7, 
		RULE_selectOption = 8, RULE_selectItem = 9, RULE_topOption = 10, RULE_countOption = 11, 
		RULE_skipTokenOption = 12;
	public static readonly string[] ruleNames = {
		"query", "queryOption", "filterOption", "primary", "valueList", "filterExpr", 
		"function", "comparison", "selectOption", "selectItem", "topOption", "countOption", 
		"skipTokenOption"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$filter'", "'$select'", "'$top'", "'$count'", "'$skiptoken'", 
		"'startswith'", "'endswith'", "'contains'", "'tolower'", "'toupper'", 
		"'length'", "'indexof'", "'substring'", "'trim'", "'time'", "'floor'", 
		"'ceil'", "'round'", "'abs'", "'year'", "'month'", "'day'", "'hour'", 
		"'minute'", "'second'", "'now'", "'date'", "'distance'", "'intersects'", 
		"'='", null, null, null, null, null, null, null, null, null, null, "'('", 
		"')'", "','", "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FILTER", "SELECT", "TOP", "COUNT", "SKIPTOKEN", "STARTSWITH", "ENDSWITH", 
		"CONTAINS", "TOLOWER", "TOUPPER", "LENGTH", "INDEXOF", "SUBSTRING", "TRIM", 
		"TIME", "FLOOR", "CEIL", "ROUND", "ABS", "YEAR", "MONTH", "DAY", "HOUR", 
		"MINUTE", "SECOND", "NOW", "DATE", "DISTANCE", "INTERSECTS", "EQ", "GT", 
		"LT", "GE", "LE", "EQ_OP", "NE", "AND", "OR", "NOT", "IN", "LPAREN", "RPAREN", 
		"COMMA", "AMPERSAND", "BOOLEAN", "NUMBER", "STRING", "IDENTIFIER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OData.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ODataParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ODataParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ODataParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryOptionContext[] queryOption() {
			return GetRuleContexts<QueryOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryOptionContext queryOption(int i) {
			return GetRuleContext<QueryOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ODataParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AMPERSAND() { return GetTokens(ODataParser.AMPERSAND); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AMPERSAND(int i) {
			return GetToken(ODataParser.AMPERSAND, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 0, RULE_query);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			queryOption();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AMPERSAND) {
				{
				{
				State = 27;
				Match(AMPERSAND);
				State = 28;
				queryOption();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 34;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterOptionContext filterOption() {
			return GetRuleContext<FilterOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext selectOption() {
			return GetRuleContext<SelectOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopOptionContext topOption() {
			return GetRuleContext<TopOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CountOptionContext countOption() {
			return GetRuleContext<CountOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SkipTokenOptionContext skipTokenOption() {
			return GetRuleContext<SkipTokenOptionContext>(0);
		}
		public QueryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterQueryOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitQueryOption(this);
		}
	}

	[RuleVersion(0)]
	public QueryOptionContext queryOption() {
		QueryOptionContext _localctx = new QueryOptionContext(Context, State);
		EnterRule(_localctx, 2, RULE_queryOption);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FILTER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				filterOption();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				selectOption();
				}
				break;
			case TOP:
				EnterOuterAlt(_localctx, 3);
				{
				State = 38;
				topOption();
				}
				break;
			case COUNT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 39;
				countOption();
				}
				break;
			case SKIPTOKEN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 40;
				skipTokenOption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER() { return GetToken(ODataParser.FILTER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ODataParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext filterExpr() {
			return GetRuleContext<FilterExprContext>(0);
		}
		public FilterOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterFilterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitFilterOption(this);
		}
	}

	[RuleVersion(0)]
	public FilterOptionContext filterOption() {
		FilterOptionContext _localctx = new FilterOptionContext(Context, State);
		EnterRule(_localctx, 4, RULE_filterOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(FILTER);
			State = 44;
			Match(EQ);
			State = 45;
			filterExpr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ODataParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ODataParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ODataParser.NUMBER, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 6, RULE_primary);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 492581209243648L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext[] primary() {
			return GetRuleContexts<PrimaryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary(int i) {
			return GetRuleContext<PrimaryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ODataParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ODataParser.COMMA, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 8, RULE_valueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			primary();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 50;
				Match(COMMA);
				State = 51;
				primary();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ODataParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext[] filterExpr() {
			return GetRuleContexts<FilterExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext filterExpr(int i) {
			return GetRuleContext<FilterExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ODataParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(ODataParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(ODataParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(ODataParser.OR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(ODataParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		public FilterExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterFilterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitFilterExpr(this);
		}
	}

	[RuleVersion(0)]
	public FilterExprContext filterExpr() {
		return filterExpr(0);
	}

	private FilterExprContext filterExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		FilterExprContext _localctx = new FilterExprContext(Context, _parentState);
		FilterExprContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_filterExpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
			case STRING:
			case IDENTIFIER:
				{
				State = 58;
				primary();
				}
				break;
			case LPAREN:
				{
				State = 59;
				Match(LPAREN);
				State = 60;
				filterExpr(0);
				State = 61;
				Match(RPAREN);
				}
				break;
			case STARTSWITH:
			case ENDSWITH:
			case CONTAINS:
			case TOLOWER:
			case TOUPPER:
			case LENGTH:
			case INDEXOF:
			case SUBSTRING:
			case TRIM:
			case TIME:
			case FLOOR:
			case CEIL:
			case ROUND:
			case ABS:
			case YEAR:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case SECOND:
			case NOW:
			case DATE:
			case DISTANCE:
			case INTERSECTS:
				{
				State = 63;
				function();
				}
				break;
			case NOT:
				{
				State = 64;
				Match(NOT);
				State = 65;
				filterExpr(3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 86;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 84;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new FilterExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_filterExpr);
						State = 68;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 69;
						comparison();
						State = 70;
						filterExpr(5);
						}
						break;
					case 2:
						{
						_localctx = new FilterExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_filterExpr);
						State = 72;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 73;
						Match(AND);
						State = 74;
						filterExpr(3);
						}
						break;
					case 3:
						{
						_localctx = new FilterExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_filterExpr);
						State = 75;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 76;
						Match(OR);
						State = 77;
						filterExpr(2);
						}
						break;
					case 4:
						{
						_localctx = new FilterExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_filterExpr);
						State = 78;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 79;
						Match(IN);
						State = 80;
						Match(LPAREN);
						State = 81;
						valueList();
						State = 82;
						Match(RPAREN);
						}
						break;
					}
					} 
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTSWITH() { return GetToken(ODataParser.STARTSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(ODataParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext[] filterExpr() {
			return GetRuleContexts<FilterExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterExprContext filterExpr(int i) {
			return GetRuleContext<FilterExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ODataParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ODataParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(ODataParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDSWITH() { return GetToken(ODataParser.ENDSWITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS() { return GetToken(ODataParser.CONTAINS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOLOWER() { return GetToken(ODataParser.TOLOWER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOUPPER() { return GetToken(ODataParser.TOUPPER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LENGTH() { return GetToken(ODataParser.LENGTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXOF() { return GetToken(ODataParser.INDEXOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING() { return GetToken(ODataParser.SUBSTRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM() { return GetToken(ODataParser.TRIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR() { return GetToken(ODataParser.YEAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH() { return GetToken(ODataParser.MONTH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY() { return GetToken(ODataParser.DAY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR() { return GetToken(ODataParser.HOUR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE() { return GetToken(ODataParser.MINUTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND() { return GetToken(ODataParser.SECOND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW() { return GetToken(ODataParser.NOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(ODataParser.DATE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(ODataParser.TIME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTANCE() { return GetToken(ODataParser.DISTANCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECTS() { return GetToken(ODataParser.INTERSECTS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ODataParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOOR() { return GetToken(ODataParser.FLOOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CEIL() { return GetToken(ODataParser.CEIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUND() { return GetToken(ODataParser.ROUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABS() { return GetToken(ODataParser.ABS, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_function);
		int _la;
		try {
			State = 228;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTSWITH:
				EnterOuterAlt(_localctx, 1);
				{
				State = 89;
				Match(STARTSWITH);
				State = 90;
				Match(LPAREN);
				State = 91;
				filterExpr(0);
				State = 92;
				Match(COMMA);
				State = 93;
				filterExpr(0);
				State = 94;
				Match(RPAREN);
				}
				break;
			case ENDSWITH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 96;
				Match(ENDSWITH);
				State = 97;
				Match(LPAREN);
				State = 98;
				filterExpr(0);
				State = 99;
				Match(COMMA);
				State = 100;
				filterExpr(0);
				State = 101;
				Match(RPAREN);
				}
				break;
			case CONTAINS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 103;
				Match(CONTAINS);
				State = 104;
				Match(LPAREN);
				State = 105;
				filterExpr(0);
				State = 106;
				Match(COMMA);
				State = 107;
				filterExpr(0);
				State = 108;
				Match(RPAREN);
				}
				break;
			case TOLOWER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 110;
				Match(TOLOWER);
				State = 111;
				Match(LPAREN);
				State = 112;
				filterExpr(0);
				State = 113;
				Match(RPAREN);
				}
				break;
			case TOUPPER:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				Match(TOUPPER);
				State = 116;
				Match(LPAREN);
				State = 117;
				filterExpr(0);
				State = 118;
				Match(RPAREN);
				}
				break;
			case LENGTH:
				EnterOuterAlt(_localctx, 6);
				{
				State = 120;
				Match(LENGTH);
				State = 121;
				Match(LPAREN);
				State = 122;
				filterExpr(0);
				State = 123;
				Match(RPAREN);
				}
				break;
			case INDEXOF:
				EnterOuterAlt(_localctx, 7);
				{
				State = 125;
				Match(INDEXOF);
				State = 126;
				Match(LPAREN);
				State = 127;
				filterExpr(0);
				State = 128;
				Match(COMMA);
				State = 129;
				filterExpr(0);
				State = 130;
				Match(RPAREN);
				}
				break;
			case SUBSTRING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 132;
				Match(SUBSTRING);
				State = 133;
				Match(LPAREN);
				State = 134;
				filterExpr(0);
				State = 135;
				Match(COMMA);
				State = 136;
				filterExpr(0);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 137;
					Match(COMMA);
					State = 138;
					filterExpr(0);
					}
				}

				State = 141;
				Match(RPAREN);
				}
				break;
			case TRIM:
				EnterOuterAlt(_localctx, 9);
				{
				State = 143;
				Match(TRIM);
				State = 144;
				Match(LPAREN);
				State = 145;
				filterExpr(0);
				State = 146;
				Match(RPAREN);
				}
				break;
			case YEAR:
				EnterOuterAlt(_localctx, 10);
				{
				State = 148;
				Match(YEAR);
				State = 149;
				Match(LPAREN);
				State = 150;
				filterExpr(0);
				State = 151;
				Match(RPAREN);
				}
				break;
			case MONTH:
				EnterOuterAlt(_localctx, 11);
				{
				State = 153;
				Match(MONTH);
				State = 154;
				Match(LPAREN);
				State = 155;
				filterExpr(0);
				State = 156;
				Match(RPAREN);
				}
				break;
			case DAY:
				EnterOuterAlt(_localctx, 12);
				{
				State = 158;
				Match(DAY);
				State = 159;
				Match(LPAREN);
				State = 160;
				filterExpr(0);
				State = 161;
				Match(RPAREN);
				}
				break;
			case HOUR:
				EnterOuterAlt(_localctx, 13);
				{
				State = 163;
				Match(HOUR);
				State = 164;
				Match(LPAREN);
				State = 165;
				filterExpr(0);
				State = 166;
				Match(RPAREN);
				}
				break;
			case MINUTE:
				EnterOuterAlt(_localctx, 14);
				{
				State = 168;
				Match(MINUTE);
				State = 169;
				Match(LPAREN);
				State = 170;
				filterExpr(0);
				State = 171;
				Match(RPAREN);
				}
				break;
			case SECOND:
				EnterOuterAlt(_localctx, 15);
				{
				State = 173;
				Match(SECOND);
				State = 174;
				Match(LPAREN);
				State = 175;
				filterExpr(0);
				State = 176;
				Match(RPAREN);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 16);
				{
				State = 178;
				Match(NOW);
				State = 179;
				Match(LPAREN);
				State = 180;
				Match(RPAREN);
				}
				break;
			case DATE:
				EnterOuterAlt(_localctx, 17);
				{
				State = 181;
				Match(DATE);
				State = 182;
				Match(LPAREN);
				State = 183;
				filterExpr(0);
				State = 184;
				Match(RPAREN);
				}
				break;
			case TIME:
				EnterOuterAlt(_localctx, 18);
				{
				State = 186;
				Match(TIME);
				State = 187;
				Match(LPAREN);
				State = 188;
				filterExpr(0);
				State = 189;
				Match(RPAREN);
				}
				break;
			case DISTANCE:
				EnterOuterAlt(_localctx, 19);
				{
				State = 191;
				Match(DISTANCE);
				State = 192;
				Match(LPAREN);
				State = 193;
				filterExpr(0);
				State = 194;
				Match(RPAREN);
				}
				break;
			case INTERSECTS:
				EnterOuterAlt(_localctx, 20);
				{
				State = 196;
				Match(INTERSECTS);
				State = 197;
				Match(LPAREN);
				State = 198;
				Match(STRING);
				State = 199;
				Match(RPAREN);
				}
				break;
			case FLOOR:
				EnterOuterAlt(_localctx, 21);
				{
				State = 200;
				Match(FLOOR);
				State = 201;
				Match(LPAREN);
				State = 202;
				filterExpr(0);
				State = 203;
				Match(COMMA);
				State = 204;
				filterExpr(0);
				State = 205;
				Match(RPAREN);
				}
				break;
			case CEIL:
				EnterOuterAlt(_localctx, 22);
				{
				State = 207;
				Match(CEIL);
				State = 208;
				Match(LPAREN);
				State = 209;
				filterExpr(0);
				State = 210;
				Match(COMMA);
				State = 211;
				filterExpr(0);
				State = 212;
				Match(RPAREN);
				}
				break;
			case ROUND:
				EnterOuterAlt(_localctx, 23);
				{
				State = 214;
				Match(ROUND);
				State = 215;
				Match(LPAREN);
				State = 216;
				filterExpr(0);
				State = 217;
				Match(COMMA);
				State = 218;
				filterExpr(0);
				State = 219;
				Match(RPAREN);
				}
				break;
			case ABS:
				EnterOuterAlt(_localctx, 24);
				{
				State = 221;
				Match(ABS);
				State = 222;
				Match(LPAREN);
				State = 223;
				filterExpr(0);
				State = 224;
				Match(COMMA);
				State = 225;
				filterExpr(0);
				State = 226;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GT() { return GetToken(ODataParser.GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LT() { return GetToken(ODataParser.LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GE() { return GetToken(ODataParser.GE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LE() { return GetToken(ODataParser.LE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ_OP() { return GetToken(ODataParser.EQ_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NE() { return GetToken(ODataParser.NE, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(Context, State);
		EnterRule(_localctx, 14, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 135291469824L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT() { return GetToken(ODataParser.SELECT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ODataParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ODataParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ODataParser.COMMA, i);
		}
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 16, RULE_selectOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(SELECT);
			State = 233;
			Match(EQ);
			State = 234;
			selectItem();
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 235;
				Match(COMMA);
				State = 236;
				selectItem();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ODataParser.IDENTIFIER, 0); }
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 18, RULE_selectItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOP() { return GetToken(ODataParser.TOP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ODataParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ODataParser.NUMBER, 0); }
		public TopOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterTopOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitTopOption(this);
		}
	}

	[RuleVersion(0)]
	public TopOptionContext topOption() {
		TopOptionContext _localctx = new TopOptionContext(Context, State);
		EnterRule(_localctx, 20, RULE_topOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(TOP);
			State = 245;
			Match(EQ);
			State = 246;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT() { return GetToken(ODataParser.COUNT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ODataParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ODataParser.BOOLEAN, 0); }
		public CountOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_countOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterCountOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitCountOption(this);
		}
	}

	[RuleVersion(0)]
	public CountOptionContext countOption() {
		CountOptionContext _localctx = new CountOptionContext(Context, State);
		EnterRule(_localctx, 22, RULE_countOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(COUNT);
			State = 249;
			Match(EQ);
			State = 250;
			Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipTokenOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIPTOKEN() { return GetToken(ODataParser.SKIPTOKEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQ() { return GetToken(ODataParser.EQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ODataParser.STRING, 0); }
		public SkipTokenOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skipTokenOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.EnterSkipTokenOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IODataListener typedListener = listener as IODataListener;
			if (typedListener != null) typedListener.ExitSkipTokenOption(this);
		}
	}

	[RuleVersion(0)]
	public SkipTokenOptionContext skipTokenOption() {
		SkipTokenOptionContext _localctx = new SkipTokenOptionContext(Context, State);
		EnterRule(_localctx, 24, RULE_skipTokenOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(SKIPTOKEN);
			State = 253;
			Match(EQ);
			State = 254;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return filterExpr_sempred((FilterExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool filterExpr_sempred(FilterExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		case 3: return Precpred(Context, 5);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,49,257,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,5,0,30,8,
		0,10,0,12,0,33,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,42,8,1,1,2,1,2,1,2,
		1,2,1,3,1,3,1,4,1,4,1,4,5,4,53,8,4,10,4,12,4,56,9,4,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,3,5,67,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,5,5,85,8,5,10,5,12,5,88,9,5,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,140,8,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,229,8,6,1,7,1,7,
		1,8,1,8,1,8,1,8,1,8,5,8,238,8,8,10,8,12,8,241,9,8,1,9,1,9,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,0,1,10,13,0,2,4,6,
		8,10,12,14,16,18,20,22,24,0,2,1,0,46,48,1,0,31,36,281,0,26,1,0,0,0,2,41,
		1,0,0,0,4,43,1,0,0,0,6,47,1,0,0,0,8,49,1,0,0,0,10,66,1,0,0,0,12,228,1,
		0,0,0,14,230,1,0,0,0,16,232,1,0,0,0,18,242,1,0,0,0,20,244,1,0,0,0,22,248,
		1,0,0,0,24,252,1,0,0,0,26,31,3,2,1,0,27,28,5,44,0,0,28,30,3,2,1,0,29,27,
		1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,0,0,0,33,31,
		1,0,0,0,34,35,5,0,0,1,35,1,1,0,0,0,36,42,3,4,2,0,37,42,3,16,8,0,38,42,
		3,20,10,0,39,42,3,22,11,0,40,42,3,24,12,0,41,36,1,0,0,0,41,37,1,0,0,0,
		41,38,1,0,0,0,41,39,1,0,0,0,41,40,1,0,0,0,42,3,1,0,0,0,43,44,5,1,0,0,44,
		45,5,30,0,0,45,46,3,10,5,0,46,5,1,0,0,0,47,48,7,0,0,0,48,7,1,0,0,0,49,
		54,3,6,3,0,50,51,5,43,0,0,51,53,3,6,3,0,52,50,1,0,0,0,53,56,1,0,0,0,54,
		52,1,0,0,0,54,55,1,0,0,0,55,9,1,0,0,0,56,54,1,0,0,0,57,58,6,5,-1,0,58,
		67,3,6,3,0,59,60,5,41,0,0,60,61,3,10,5,0,61,62,5,42,0,0,62,67,1,0,0,0,
		63,67,3,12,6,0,64,65,5,39,0,0,65,67,3,10,5,3,66,57,1,0,0,0,66,59,1,0,0,
		0,66,63,1,0,0,0,66,64,1,0,0,0,67,86,1,0,0,0,68,69,10,4,0,0,69,70,3,14,
		7,0,70,71,3,10,5,5,71,85,1,0,0,0,72,73,10,2,0,0,73,74,5,37,0,0,74,85,3,
		10,5,3,75,76,10,1,0,0,76,77,5,38,0,0,77,85,3,10,5,2,78,79,10,5,0,0,79,
		80,5,40,0,0,80,81,5,41,0,0,81,82,3,8,4,0,82,83,5,42,0,0,83,85,1,0,0,0,
		84,68,1,0,0,0,84,72,1,0,0,0,84,75,1,0,0,0,84,78,1,0,0,0,85,88,1,0,0,0,
		86,84,1,0,0,0,86,87,1,0,0,0,87,11,1,0,0,0,88,86,1,0,0,0,89,90,5,6,0,0,
		90,91,5,41,0,0,91,92,3,10,5,0,92,93,5,43,0,0,93,94,3,10,5,0,94,95,5,42,
		0,0,95,229,1,0,0,0,96,97,5,7,0,0,97,98,5,41,0,0,98,99,3,10,5,0,99,100,
		5,43,0,0,100,101,3,10,5,0,101,102,5,42,0,0,102,229,1,0,0,0,103,104,5,8,
		0,0,104,105,5,41,0,0,105,106,3,10,5,0,106,107,5,43,0,0,107,108,3,10,5,
		0,108,109,5,42,0,0,109,229,1,0,0,0,110,111,5,9,0,0,111,112,5,41,0,0,112,
		113,3,10,5,0,113,114,5,42,0,0,114,229,1,0,0,0,115,116,5,10,0,0,116,117,
		5,41,0,0,117,118,3,10,5,0,118,119,5,42,0,0,119,229,1,0,0,0,120,121,5,11,
		0,0,121,122,5,41,0,0,122,123,3,10,5,0,123,124,5,42,0,0,124,229,1,0,0,0,
		125,126,5,12,0,0,126,127,5,41,0,0,127,128,3,10,5,0,128,129,5,43,0,0,129,
		130,3,10,5,0,130,131,5,42,0,0,131,229,1,0,0,0,132,133,5,13,0,0,133,134,
		5,41,0,0,134,135,3,10,5,0,135,136,5,43,0,0,136,139,3,10,5,0,137,138,5,
		43,0,0,138,140,3,10,5,0,139,137,1,0,0,0,139,140,1,0,0,0,140,141,1,0,0,
		0,141,142,5,42,0,0,142,229,1,0,0,0,143,144,5,14,0,0,144,145,5,41,0,0,145,
		146,3,10,5,0,146,147,5,42,0,0,147,229,1,0,0,0,148,149,5,20,0,0,149,150,
		5,41,0,0,150,151,3,10,5,0,151,152,5,42,0,0,152,229,1,0,0,0,153,154,5,21,
		0,0,154,155,5,41,0,0,155,156,3,10,5,0,156,157,5,42,0,0,157,229,1,0,0,0,
		158,159,5,22,0,0,159,160,5,41,0,0,160,161,3,10,5,0,161,162,5,42,0,0,162,
		229,1,0,0,0,163,164,5,23,0,0,164,165,5,41,0,0,165,166,3,10,5,0,166,167,
		5,42,0,0,167,229,1,0,0,0,168,169,5,24,0,0,169,170,5,41,0,0,170,171,3,10,
		5,0,171,172,5,42,0,0,172,229,1,0,0,0,173,174,5,25,0,0,174,175,5,41,0,0,
		175,176,3,10,5,0,176,177,5,42,0,0,177,229,1,0,0,0,178,179,5,26,0,0,179,
		180,5,41,0,0,180,229,5,42,0,0,181,182,5,27,0,0,182,183,5,41,0,0,183,184,
		3,10,5,0,184,185,5,42,0,0,185,229,1,0,0,0,186,187,5,15,0,0,187,188,5,41,
		0,0,188,189,3,10,5,0,189,190,5,42,0,0,190,229,1,0,0,0,191,192,5,28,0,0,
		192,193,5,41,0,0,193,194,3,10,5,0,194,195,5,42,0,0,195,229,1,0,0,0,196,
		197,5,29,0,0,197,198,5,41,0,0,198,199,5,47,0,0,199,229,5,42,0,0,200,201,
		5,16,0,0,201,202,5,41,0,0,202,203,3,10,5,0,203,204,5,43,0,0,204,205,3,
		10,5,0,205,206,5,42,0,0,206,229,1,0,0,0,207,208,5,17,0,0,208,209,5,41,
		0,0,209,210,3,10,5,0,210,211,5,43,0,0,211,212,3,10,5,0,212,213,5,42,0,
		0,213,229,1,0,0,0,214,215,5,18,0,0,215,216,5,41,0,0,216,217,3,10,5,0,217,
		218,5,43,0,0,218,219,3,10,5,0,219,220,5,42,0,0,220,229,1,0,0,0,221,222,
		5,19,0,0,222,223,5,41,0,0,223,224,3,10,5,0,224,225,5,43,0,0,225,226,3,
		10,5,0,226,227,5,42,0,0,227,229,1,0,0,0,228,89,1,0,0,0,228,96,1,0,0,0,
		228,103,1,0,0,0,228,110,1,0,0,0,228,115,1,0,0,0,228,120,1,0,0,0,228,125,
		1,0,0,0,228,132,1,0,0,0,228,143,1,0,0,0,228,148,1,0,0,0,228,153,1,0,0,
		0,228,158,1,0,0,0,228,163,1,0,0,0,228,168,1,0,0,0,228,173,1,0,0,0,228,
		178,1,0,0,0,228,181,1,0,0,0,228,186,1,0,0,0,228,191,1,0,0,0,228,196,1,
		0,0,0,228,200,1,0,0,0,228,207,1,0,0,0,228,214,1,0,0,0,228,221,1,0,0,0,
		229,13,1,0,0,0,230,231,7,1,0,0,231,15,1,0,0,0,232,233,5,2,0,0,233,234,
		5,30,0,0,234,239,3,18,9,0,235,236,5,43,0,0,236,238,3,18,9,0,237,235,1,
		0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,17,1,0,0,0,241,
		239,1,0,0,0,242,243,5,48,0,0,243,19,1,0,0,0,244,245,5,3,0,0,245,246,5,
		30,0,0,246,247,5,46,0,0,247,21,1,0,0,0,248,249,5,4,0,0,249,250,5,30,0,
		0,250,251,5,45,0,0,251,23,1,0,0,0,252,253,5,5,0,0,253,254,5,30,0,0,254,
		255,5,47,0,0,255,25,1,0,0,0,9,31,41,54,66,84,86,139,228,239
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
